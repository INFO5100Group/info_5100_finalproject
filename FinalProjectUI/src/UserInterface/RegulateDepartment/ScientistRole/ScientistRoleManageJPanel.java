/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UserInterface.RegulateDepartment.ScientistRole;

import Business.Account.Account;
import Business.Enterprise.Enterprise;
import Business.WorkQueue.WorkQueue;
import Business.WorkQueue.WorkRequest;
import EcoSystem.EcoSystem;
import System.Configure.DB4OUtil;
import System.Configure.MapGenerator;
import java.awt.Color;
import java.awt.Font;
import java.util.Iterator;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;
import org.json.JSONArray;
import org.json.JSONObject;

/**
 *
 * @author Bohan Feng
 */
public class ScientistRoleManageJPanel extends javax.swing.JPanel {

    private Account account;
    private EcoSystem system;

    public ScientistRoleManageJPanel() {
        initComponents();
    }

    public ScientistRoleManageJPanel(Account account, EcoSystem system) {
        this();
        this.account = account;
        this.system = system;
        populateTable();
        setButtonImage();
        setTable();
    }

    public void populateTable() {
        DefaultTableModel model = (DefaultTableModel) this.LicenseJTable.getModel();
        model.setRowCount(0);
        WorkQueue wq = system.getWorkQueue().getRequestsByRecevier(account);
        for (WorkRequest wr : wq) {
            if (!wr.isIsCompleted()) {
                Enterprise e = system.getEnterprises().getEnterpriseByEmployeeAccount(wr.getSender());
                JSONObject currInfo = new JSONObject(wr.getMessage());
                Object row[] = new Object[7];
                row[1] = e.getName() + "-" + wr.getSender().getAccountName();
                row[2] = currInfo.getString("Species");
                row[3] = currInfo.getString("Weight");
                row[4] = currInfo.getString("StartTime");
                row[5] = currInfo.getString("EndTime");
                row[6] = wr.getStatus();
                row[0] = wr;
                model.addRow(row);

            }
        }
    }
    private void setButtonImage(){
         ImageIcon delete=new ImageIcon("./image/Accept.png");
         btnAccept.setIcon(delete);
         ImageIcon regist=new ImageIcon("./image/reject.png");
         btnReject.setIcon(regist);
    }
    private void setTable(){
        DefaultTableCellRenderer cellRenderer = new DefaultTableCellRenderer();
        cellRenderer.setBackground(new Color(149,19,19));
        cellRenderer.setForeground(Color.white);
        for(int i=0;i<7;i++){
            TableColumn column = LicenseJTable.getTableHeader().getColumnModel().getColumn(i);
             column.setHeaderRenderer(cellRenderer);            
        }
    }
    public void populateCommnet() {
        int selectedRow = this.LicenseJTable.getSelectedRow();

        if (selectedRow >= 0) {
            WorkRequest wr = (WorkRequest) (LicenseJTable.getValueAt(selectedRow, 0));
            
            JSONObject currInfo = new JSONObject(wr.getMessage());
            // create a map in label
            MapGenerator.CreateMap(currInfo.getString("Latitude"), currInfo.getString("longitude"), jlbMap, 600,350);
            txtOtherCommnet.setText("");
            if(currInfo.isNull("Commnet")){
                JSONObject com = new JSONObject(); 
                com.accumulate(account.getID()+"", "");
                currInfo.accumulate("Commnet", com);
                
                wr.setMessage(currInfo.toString());
            }else{
                JSONObject com = currInfo.getJSONObject("Commnet");
                Iterator<String> keys = com.keys();
                
                while(keys.hasNext()){
                    String key = keys.next();
                    txtOtherCommnet.setText(txtOtherCommnet.getText() 
                            + system.getAccounts().getAccountByID(Integer.parseInt(key)) 
                            + " : " 
                            +com.get(key) + "\n");
                    
                    if(key.equals(this.account.getID() + "")){
                        jtxArea.setText(com.getString(key));
                    }
                }
            }
            DB4OUtil.storeSystem(system);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnAccept = new javax.swing.JButton();
        btnReject = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jtxArea = new javax.swing.JTextArea();
        jScrollPane1 = new javax.swing.JScrollPane();
        LicenseJTable = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        txtOtherCommnet = new javax.swing.JTextArea();
        jPanel1 = new javax.swing.JPanel();
        jlbMap = new javax.swing.JLabel();

        setBackground(new java.awt.Color(255, 255, 255));
        setMinimumSize(new java.awt.Dimension(1001, 716));
        setPreferredSize(new java.awt.Dimension(1001, 716));

        btnAccept.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        btnAccept.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAcceptActionPerformed(evt);
            }
        });

        btnReject.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        btnReject.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRejectActionPerformed(evt);
            }
        });

        jtxArea.setColumns(20);
        jtxArea.setRows(5);
        jtxArea.setBorder(null);
        jScrollPane2.setViewportView(jtxArea);

        jScrollPane1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        LicenseJTable.setFont(new java.awt.Font("Yu Gothic", 1, 18)); // NOI18N
        LicenseJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "ID", "Sender", "TimberSpecies", "TimberWeight", "StartTime", "EndTime", "Status"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                true, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        LicenseJTable.setFocusable(false);
        LicenseJTable.setRowHeight(25);
        LicenseJTable.setSelectionBackground(new java.awt.Color(153, 204, 255));
        LicenseJTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                LicenseJTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(LicenseJTable);

        jLabel1.setText("Comment");

        txtOtherCommnet.setEditable(false);
        txtOtherCommnet.setColumns(20);
        txtOtherCommnet.setRows(5);
        txtOtherCommnet.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        txtOtherCommnet.setCaretColor(new java.awt.Color(255, 255, 255));
        txtOtherCommnet.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        txtOtherCommnet.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        jScrollPane3.setViewportView(txtOtherCommnet);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jlbMap, javax.swing.GroupLayout.DEFAULT_SIZE, 666, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jlbMap, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                            .addComponent(btnAccept, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(97, 97, 97)
                            .addComponent(btnReject, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 1215, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 485, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 485, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(181, 181, 181))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 203, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 162, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnAccept, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnReject, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(50, 50, 50))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnAcceptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAcceptActionPerformed
        String currCommnet = jtxArea.getText();
        if(currCommnet.equals("")){
            currCommnet += "Accepted";
        }
        int selectedRow = this.LicenseJTable.getSelectedRow();

        submitCommnet(selectedRow, currCommnet, true);
    }//GEN-LAST:event_btnAcceptActionPerformed

    private void btnRejectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRejectActionPerformed
        String currCommnet = jtxArea.getText();
        if(currCommnet.equals("")){
            currCommnet += "Not Accepted";
        }
        int selectedRow = this.LicenseJTable.getSelectedRow();
        
        submitCommnet(selectedRow, currCommnet, false);
    }//GEN-LAST:event_btnRejectActionPerformed

    public void submitCommnet(int selectedRow, String currCommnet, boolean isAccept){
        if (selectedRow >= 0) {
            WorkRequest wr = (WorkRequest) (LicenseJTable.getValueAt(selectedRow, 0));
            
            JSONObject currInfo = new JSONObject(wr.getMessage());
            
            currInfo.getJSONObject("Commnet").put(this.account.getID()+"", currCommnet);
            
            wr.setMessage(currInfo.toString());
            
            wr.getReceivers().put(account, isAccept);
            
            wr.setStatus("Evaluated by scientist");
            
            populateCommnet();
            populateTable();
            
            DB4OUtil.storeSystem(system);
        }
    }
    
    public boolean nameDefined(){
        return this.account.getPerson().getFirstName() != null &&
         this.account.getPerson().getLastName()!= null;
                
    }
    
    private void LicenseJTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_LicenseJTableMouseClicked
        populateCommnet();
    }//GEN-LAST:event_LicenseJTableMouseClicked


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable LicenseJTable;
    private javax.swing.JButton btnAccept;
    private javax.swing.JButton btnReject;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JLabel jlbMap;
    private javax.swing.JTextArea jtxArea;
    private javax.swing.JTextArea txtOtherCommnet;
    // End of variables declaration//GEN-END:variables
}
